<!-- # **THE SOUND OF SPACE**

- [**THE SOUND OF SPACE**](#the-sound-of-space)
  - [INTRODUCTION](#introduction)
    - [Introduction Video](#introduction-video)
    - [Planets](#planets)
      - [Instrument 1](#)
      - [Instrument 2](#)
      - [Instrument 3](#)
      - [Music Style](#music-style)
      - [Rhythmic Pattern](#rhythmic-pattern)
  - [Music generation](#music-generation)
    - [Note duration](#note-duration)
  - [Implementation](#implementation)
    - [Audio Generation](#audio-generation)
  - [Presentation files](#presentation-files)
  - [Group members](#group-members)

## INTRODUCTION

This project was developed in the context of the "Advanceed Coding Tools and Methodologies" course held at [Politecnico di Milano](https://www.polimi.it/). The task was to develop a website that relates to the Master degree of [Music and Acoustic Engineering](https://suono.polimi.it/), in which the course is inserted.
This project has the aim of create a space environment where the user can be admire images of the universe and interact with them. Sounds are generated by an algorhythm of image-processing and they can be modified by the user to adapt music to its taste.

### Introduction Video

<a align="center" href="" target="_blank">
 <img src="." alt="Watch the video" width="860" height="540" />
</a>

### Environments Overview video

<a align="center" href="" target="_blank">
 <img src="" alt="Watch the video" width="860" height="527" />
</a>

## User Guide

The system can be tested by the user in two ways:

- <a href="" target="_blank" rel="noopener noreferrer">Hosted Website</a>
- Downloading the whole project from GitHub and running it using VS CODE live server

### First page

![]()
In this page the user is asked to choose an image from the proposed selection.
Now the algorhythm analyzes the image to extract:

- The color palette
- ...

<p align="center">
  <img src="" width="300" />
  <img src="" width="300" /> 
</p>

### Second page

This page shows in detail the extracted parameters along with the image itself. Here the user can visualize how the algorhythm connects image and sound.

### Example

### Third page

The last page is where the magic happens: the Solar System is displayed in order to visualize the generated sound. Each planet represents one specific component that contributes to the symphony, in particular associating the periodical occurrence of the instruments with their revolution rate.
The whole system is based on the library p5.js, an interpretation of Processing for web applications. In particular we built a 3D environment using the WEBGL render mode, in which the planets (and the Sun) are created just by wrapping a texture over a sphere. The motion of these celestial objects is led by an operation of translation that progresses in real time, in the draw() function (a peculiarity of p5.js, that endlessly iterates over itself), and their relative orbits are drawn with ellipse(). We made up the planet() function that manages all of the previous operations, taking as inputs the characteristic parameters of each element, that we organized in convenient vectors so that it can all be run in a for structure.

The GUI consists in a few buttons and a series of drop-down menus and sliders. On the top-right corner there is the Play/Stop button which controls the sound, assuring a correct synchronization of the beat with the planets before starting to play and move the elements. Immediately below there are two buttons related to the camera, which let the user change its perspective between a "2D" (from the top) and the default "3D" one. On the other side of the screen there is the part of the user interface that controls the sound: the Mute/Unmute button function's is pretty straight forward, whereas the Menu/Hide one controls the display of a pop-up menu. The latter consists in eight drop-down menus that offer different options for the rhythmic relations between the synths and eight sliders that simply control their volume. On the top of the page the extracted parameters are carried over from the previous page, so that the user always knows what they are listening to. -->
